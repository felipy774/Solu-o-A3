package com.projectmanager.model;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class Team {
    private String id;
    private String nome;
    private String descricao;
    private String criadorId; // Chave estrangeira para User
    private LocalDateTime dataCriacao;
    private boolean ativo;
    private List<String> memberIds; // Chaves estrangeiras para Users
    private List<String> projectIds; // Projetos da equipe

    public Team() {
        this.id = generateId();
        this.dataCriacao = LocalDateTime.now();
        this.ativo = true;
        this.memberIds = new ArrayList<>();
        this.projectIds = new ArrayList<>();
    }

    public Team(String nome, String descricao, String criadorId) {
        this();
        this.nome = nome;
        this.descricao = descricao;
        this.criadorId = criadorId;
        this.memberIds.add(criadorId); // Criador é automaticamente membro
    }

    // Getters
    public String getId() { return id; }
    public String getNome() { return nome; }
    public String getDescricao() { return descricao; }
    public String getCriadorId() { return criadorId; }
    public LocalDateTime getDataCriacao() { return dataCriacao; }
    public boolean isAtivo() { return ativo; }
    public List<String> getMemberIds() { return new ArrayList<>(memberIds); }
    public List<String> getProjectIds() { return new ArrayList<>(projectIds); }

    // Setters
    public void setId(String id) { this.id = id; }
    public void setNome(String nome) { this.nome = nome; }
    public void setDescricao(String descricao) { this.descricao = descricao; }
    public void setCriadorId(String criadorId) { this.criadorId = criadorId; }
    public void setDataCriacao(LocalDateTime dataCriacao) { this.dataCriacao = dataCriacao; }
    public void setAtivo(boolean ativo) { this.ativo = ativo; }

    // Métodos de gerenciamento de membros
    public boolean addMember(String userId) {
        if (!memberIds.contains(userId)) {
            memberIds.add(userId);
            return true;
        }
        return false;
    }

    public boolean removeMember(String userId) {
        // Não permite remover o criador
        if (userId.equals(criadorId)) {
            return false;
        }
        return memberIds.remove(userId);
    }

    public boolean isMember(String userId) {
        return memberIds.contains(userId);
    }

    public boolean isCreator(String userId) {
        return criadorId.equals(userId);
    }

    public int getMemberCount() {
        return memberIds.size();
    }

    // Métodos de gerenciamento de projetos
    public boolean addProject(String projectId) {
        if (!projectIds.contains(projectId)) {
            projectIds.add(projectId);
            return true;
        }
        return false;
    }

    public boolean removeProject(String projectId) {
        return projectIds.remove(projectId);
    }

    public boolean hasProject(String projectId) {
        return projectIds.contains(projectId);
    }

    public int getProjectCount() {
        return projectIds.size();
    }

    private String generateId() {
        return "TEAM_" + System.currentTimeMillis() + "_" + (int)(Math.random() * 1000);
    }

    // Método para serialização
    public String toFileString() {
        return String.join("|",
            id,
            nome,
            descricao,
            criadorId,
            dataCriacao.toString(),
            String.valueOf(ativo),
            String.join(",", memberIds),
            String.join(",", projectIds)
        );
    }

    // Método para deserialização
    public static Team fromFileString(String line) {
        String[] parts = line.split("\\|", -1);
        if (parts.length < 6) throw new IllegalArgumentException("Invalid team format");

        Team team = new Team();
        team.setId(parts[0]);
        team.setNome(parts[1]);
        team.setDescricao(parts[2]);
        team.setCriadorId(parts[3]);
        team.setDataCriacao(LocalDateTime.parse(parts[4]));
        team.setAtivo(Boolean.parseBoolean(parts[5]));

        team.memberIds.clear();
        if (parts.length > 6 && !parts[6].isEmpty()) {
            String[] memberIds = parts[6].split(",");
            for (String memberId : memberIds) {
                if (!memberId.trim().isEmpty()) {
                    team.memberIds.add(memberId.trim());
                }
            }
        }

        if (parts.length > 7 && !parts[7].isEmpty()) {
            String[] projectIds = parts[7].split(",");
            for (String projectId : projectIds) {
                if (!projectId.trim().isEmpty()) {
                    team.projectIds.add(projectId.trim());
                }
            }
        }

        return team;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Team team = (Team) o;
        return Objects.equals(id, team.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        return String.format("Equipe: %s | Membros: %d | Projetos: %d | Status: %s", 
                           nome, memberIds.size(), projectIds.size(), 
                           ativo ? "Ativa" : "Inativa");
    }
}
