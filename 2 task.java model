package com.projectmanager.model;

import java.time.LocalDateTime;
import java.util.Objects;

public class Task {
    private String id;
    private String titulo;
    private String descricao;
    private String projectId; // Chave estrangeira
    private String teamId; // Chave estrangeira
    private String responsavelId; // Chave estrangeira
    private TaskStatus status;
    private LocalDateTime dataCriacao;
    private LocalDateTime dataVencimento;
    private LocalDateTime dataConclusao;
    private boolean camposObrigatoriosPreenchidos;

    public Task() {
        this.id = generateId();
        this.dataCriacao = LocalDateTime.now();
        this.status = TaskStatus.PENDENTE;
        this.camposObrigatoriosPreenchidos = false;
    }

    public Task(String titulo, String descricao, String projectId, String teamId) {
        this();
        this.titulo = titulo;
        this.descricao = descricao;
        this.projectId = projectId;
        this.teamId = teamId;
    }

    // Getters e Setters
    public String getId() { return id; }
    public String getTitulo() { return titulo; }
    public String getDescricao() { return descricao; }
    public String getProjectId() { return projectId; }
    public String getTeamId() { return teamId; }
    public String getResponsavelId() { return responsavelId; }
    public TaskStatus getStatus() { return status; }
    public LocalDateTime getDataCriacao() { return dataCriacao; }
    public LocalDateTime getDataVencimento() { return dataVencimento; }
    public LocalDateTime getDataConclusao() { return dataConclusao; }
    public boolean isCamposObrigatoriosPreenchidos() { return camposObrigatoriosPreenchidos; }

    public void setId(String id) { this.id = id; }
    public void setTitulo(String titulo) { this.titulo = titulo; }
    public void setDescricao(String descricao) { this.descricao = descricao; }
    public void setProjectId(String projectId) { this.projectId = projectId; }
    public void setTeamId(String teamId) { this.teamId = teamId; }
    public void setResponsavelId(String responsavelId) { this.responsavelId = responsavelId; }
    public void setStatus(TaskStatus status) { this.status = status; }
    public void setDataCriacao(LocalDateTime dataCriacao) { this.dataCriacao = dataCriacao; }
    public void setDataVencimento(LocalDateTime dataVencimento) { this.dataVencimento = dataVencimento; }
    public void setDataConclusao(LocalDateTime dataConclusao) { this.dataConclusao = dataConclusao; }
    public void setCamposObrigatoriosPreenchidos(boolean camposObrigatoriosPreenchidos) { 
        this.camposObrigatoriosPreenchidos = camposObrigatoriosPreenchidos; 
    }

    // Métodos de controle
    public boolean canAdvance() {
        return camposObrigatoriosPreenchidos && status.isEditable();
    }

    public boolean markAsStarted(String userId) {
        if (canAdvance() && status == TaskStatus.PENDENTE) {
            status = TaskStatus.EM_ANDAMENTO;
            responsavelId = userId;
            return true;
        }
        return false;
    }

    public boolean markAsCompleted(String userId) {
        if (canAdvance() && status == TaskStatus.EM_ANDAMENTO && userId.equals(responsavelId)) {
            status = TaskStatus.CONCLUIDA;
            dataConclusao = LocalDateTime.now();
            return true;
        }
        return false;
    }

    public void validateRequiredFields() {
        camposObrigatoriosPreenchidos = titulo != null && !titulo.trim().isEmpty() &&
                                       descricao != null && !descricao.trim().isEmpty() &&
                                       projectId != null && teamId != null;
    }

    private String generateId() {
        return "TASK_" + System.currentTimeMillis() + "_" + (int)(Math.random() * 1000);
    }

    public String toFileString() {
        return String.join("|",
            id, titulo, descricao, projectId, teamId,
            responsavelId != null ? responsavelId : "",
            status.name(),
            dataCriacao.toString(),
            dataVencimento != null ? dataVencimento.toString() : "",
            dataConclusao != null ? dataConclusao.toString() : "",
            String.valueOf(camposObrigatoriosPreenchidos)
        );
    }

    public static Task fromFileString(String line) {
        String[] parts = line.split("\\|", -1);
        if (parts.length < 8) throw new IllegalArgumentException("Invalid task format");

        Task task = new Task();
        task.setId(parts[0]);
        task.setTitulo(parts[1]);
        task.setDescricao(parts[2]);
        task.setProjectId(parts[3]);
        task.setTeamId(parts[4]);
        task.setResponsavelId(parts[5].isEmpty() ? null : parts[5]);
        task.setStatus(TaskStatus.valueOf(parts[6]));
        task.setDataCriacao(LocalDateTime.parse(parts[7]));
        
        if (parts.length > 8 && !parts[8].isEmpty()) {
            task.setDataVencimento(LocalDateTime.parse(parts[8]));
        }
        if (parts.length > 9 && !parts[9].isEmpty()) {
            task.setDataConclusao(LocalDateTime.parse(parts[9]));
        }
        if (parts.length > 10) {
            task.setCamposObrigatoriosPreenchidos(Boolean.parseBoolean(parts[10]));
        }

        return task;
    }

    @Override
    public String toString() {
        return String.format("Tarefa: %s | Status: %s | Responsável: %s", 
                           titulo, status.getDisplayName(), 
                           responsavelId != null ? responsavelId : "Não atribuído");
    }
}
