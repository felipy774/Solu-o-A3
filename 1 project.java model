package com.projectmanager.model;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class Project {
    private String id;
    private String nome;
    private String descricao;
    private LocalDate dataInicio;
    private LocalDate dataTerminoPrevista;
    private LocalDate dataTerminoReal;
    private ProjectStatus status;
    private String gerenteId; // Chave estrangeira para User
    private LocalDateTime dataCriacao;
    private List<String> teamIds; // Equipes que participam do projeto
    private List<String> taskIds; // Tarefas do projeto

    public Project() {
        this.id = generateId();
        this.dataCriacao = LocalDateTime.now();
        this.status = ProjectStatus.PLANEJADO;
        this.teamIds = new ArrayList<>();
        this.taskIds = new ArrayList<>();
    }

    public Project(String nome, String descricao, LocalDate dataInicio, 
                   LocalDate dataTerminoPrevista, String gerenteId) {
        this();
        this.nome = nome;
        this.descricao = descricao;
        this.dataInicio = dataInicio;
        this.dataTerminoPrevista = dataTerminoPrevista;
        this.gerenteId = gerenteId;
    }

    // Getters
    public String getId() { return id; }
    public String getNome() { return nome; }
    public String getDescricao() { return descricao; }
    public LocalDate getDataInicio() { return dataInicio; }
    public LocalDate getDataTerminoPrevista() { return dataTerminoPrevista; }
    public LocalDate getDataTerminoReal() { return dataTerminoReal; }
    public ProjectStatus getStatus() { return status; }
    public String getGerenteId() { return gerenteId; }
    public LocalDateTime getDataCriacao() { return dataCriacao; }
    public List<String> getTeamIds() { return new ArrayList<>(teamIds); }
    public List<String> getTaskIds() { return new ArrayList<>(taskIds); }

    // Setters
    public void setId(String id) { this.id = id; }
    public void setNome(String nome) { this.nome = nome; }
    public void setDescricao(String descricao) { this.descricao = descricao; }
    public void setDataInicio(LocalDate dataInicio) { this.dataInicio = dataInicio; }
    public void setDataTerminoPrevista(LocalDate dataTerminoPrevista) { this.dataTerminoPrevista = dataTerminoPrevista; }
    public void setDataTerminoReal(LocalDate dataTerminoReal) { this.dataTerminoReal = dataTerminoReal; }
    public void setStatus(ProjectStatus status) { this.status = status; }
    public void setGerenteId(String gerenteId) { this.gerenteId = gerenteId; }
    public void setDataCriacao(LocalDateTime dataCriacao) { this.dataCriacao = dataCriacao; }

    // Métodos de gerenciamento de equipes
    public boolean addTeam(String teamId) {
        if (!teamIds.contains(teamId)) {
            teamIds.add(teamId);
            return true;
        }
        return false;
    }

    public boolean removeTeam(String teamId) {
        return teamIds.remove(teamId);
    }

    public boolean hasTeam(String teamId) {
        return teamIds.contains(teamId);
    }

    public int getTeamCount() {
        return teamIds.size();
    }

    // Métodos de gerenciamento de tarefas
    public boolean addTask(String taskId) {
        if (!taskIds.contains(taskId)) {
            taskIds.add(taskId);
            return true;
        }
        return false;
    }

    public boolean removeTask(String taskId) {
        return taskIds.remove(taskId);
    }

    public boolean hasTask(String taskId) {
        return taskIds.contains(taskId);
    }

    public int getTaskCount() {
        return taskIds.size();
    }

    // Métodos de controle de status
    public boolean canBeEdited() {
        return status.isEditable();
    }

    public boolean isActive() {
        return status.isActive();
    }

    public boolean isCanceled() {
        return status == ProjectStatus.CANCELADO;
    }

    public boolean isCompleted() {
        return status == ProjectStatus.CONCLUIDO;
    }

    public void markAsStarted() {
        if (status == ProjectStatus.PLANEJADO) {
            status = ProjectStatus.EM_ANDAMENTO;
        }
    }

    public void markAsCompleted() {
        if (status != ProjectStatus.CANCELADO) {
            status = ProjectStatus.CONCLUIDO;
            dataTerminoReal = LocalDate.now();
        }
    }

    public void markAsCanceled() {
        if (status != ProjectStatus.CONCLUIDO) {
            status = ProjectStatus.CANCELADO;
        }
    }

    public void reactivate() {
        if (status == ProjectStatus.CANCELADO) {
            status = ProjectStatus.PLANEJADO;
        }
    }

    // Métodos de validação
    public boolean isOverdue() {
        if (dataTerminoPrevista == null) return false;
        return LocalDate.now().isAfter(dataTerminoPrevista) && 
               status != ProjectStatus.CONCLUIDO && 
               status != ProjectStatus.CANCELADO;
    }

    public long getDaysRemaining() {
        if (dataTerminoPrevista == null || isCompleted() || isCanceled()) return 0;
        return LocalDate.now().until(dataTerminoPrevista).getDays();
    }

    public String getFormattedDataInicio() {
        return dataInicio != null ? dataInicio.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) : "";
    }

    public String getFormattedDataTerminoPrevista() {
        return dataTerminoPrevista != null ? dataTerminoPrevista.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) : "";
    }

    public String getFormattedDataTerminoReal() {
        return dataTerminoReal != null ? dataTerminoReal.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) : "";
    }

    private String generateId() {
        return "PROJ_" + System.currentTimeMillis() + "_" + (int)(Math.random() * 1000);
    }

    // Método para serialização
    public String toFileString() {
        return String.join("|",
            id,
            nome,
            descricao,
            dataInicio != null ? dataInicio.toString() : "",
            dataTerminoPrevista != null ? dataTerminoPrevista.toString() : "",
            dataTerminoReal != null ? dataTerminoReal.toString() : "",
            status.name(),
            gerenteId,
            dataCriacao.toString(),
            String.join(",", teamIds),
            String.join(",", taskIds)
        );
    }

    // Método para deserialização
    public static Project fromFileString(String line) {
        String[] parts = line.split("\\|", -1);
        if (parts.length < 9) throw new IllegalArgumentException("Invalid project format");

        Project project = new Project();
        project.setId(parts[0]);
        project.setNome(parts[1]);
        project.setDescricao(parts[2]);
        
        if (!parts[3].isEmpty()) {
            project.setDataInicio(LocalDate.parse(parts[3]));
        }
        if (!parts[4].isEmpty()) {
            project.setDataTerminoPrevista(LocalDate.parse(parts[4]));
        }
        if (!parts[5].isEmpty()) {
            project.setDataTerminoReal(LocalDate.parse(parts[5]));
        }
        
        project.setStatus(ProjectStatus.valueOf(parts[6]));
        project.setGerenteId(parts[7]);
        project.setDataCriacao(LocalDateTime.parse(parts[8]));

        project.teamIds.clear();
        if (parts.length > 9 && !parts[9].isEmpty()) {
            String[] teamIds = parts[9].split(",");
            for (String teamId : teamIds) {
                if (!teamId.trim().isEmpty()) {
                    project.teamIds.add(teamId.trim());
                }
            }
        }

        if (parts.length > 10 && !parts[10].isEmpty()) {
            String[] taskIds = parts[10].split(",");
            for (String taskId : taskIds) {
                if (!taskId.trim().isEmpty()) {
                    project.taskIds.add(taskId.trim());
                }
            }
        }

        return project;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Project project = (Project) o;
        return Objects.equals(id, project.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        String statusInfo = isOverdue() ? " (ATRASADO)" : 
                           getDaysRemaining() > 0 ? " (" + getDaysRemaining() + " dias restantes)" : "";
        
        return String.format("Projeto: %s | Status: %s | Gerente: %s | Equipes: %d%s", 
                           nome, status.getDisplayName(), gerenteId, teamIds.size(), statusInfo);
    }
}
